在不改变原类文件以及不使用继承的情况下，动态地将责任附加到对象上，从而实现动态拓展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。

设计原则
1、多用组合，少用继承
2、开放-关闭原则，类应对扩展开放，对修改关闭

参与者
1、Component（被装饰对象的基类）：通常是一个抽象类或者一个接口，定义了属性或者方法，方法的实现可以由子类实现或者自己实现。通常不会直接使用该类，而是通过继承该类来实现特定的功能，它约束了整个继承树的行为。例：如果 Component 代表人，即使通过装饰也不会使人变成别的动物。
2、ConcreteComponent（具体被装饰的对象）：是 Component 的子类，实现了相应的方法，它充当了“被装饰者”的角色。
3、Decorator（装饰者抽象类）：也是 Component 的子类，它是装饰者共同实现的抽象类（也可以是接口）。例：Decorator 代表衣服这一类装饰者，那么它的子类应该是T恤、裙子这样的具体的装饰者。
4、ConcreteDecorator（具体装饰者）：是 Decorator 的子类，是具体的装饰者，由于它同时也是 Component 的子类，因此它能方便地扩展 Component 的方法。每个装饰者都应该有一个实例变量用以保存某个 Component 的引用，这也是利用了组合的特性。在持有 Component 的引用后，由于其自身也是 Component 的子类，那么，相当于 ConcreteDecorator 包裹了 Component，不但有 Component 的特性，同时自身也可以有别的特性，也就是所谓的装饰。
