<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/util
	http://www.springframework.org/schema/util/spring-util.xsd">

	<description>ApacheShiro</description>


	<!--Shiro权限过滤过滤器定义-->
	<bean name="shiroFilterChainDefinitions" class="java.lang.String">
		<constructor-arg>
			<value>
				/static/**=anon
				${adminPath}/login=authc
				${adminPath}/logout=logout
			</value>
		</constructor-arg>
	</bean>

	<!--Shiro的Web过滤器-->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!--装配securityManager-->
		<property name="securityManager" ref="securityManager"/>

		<!--没有登录的用户请求需要登录的页面时自动跳转到登录页面，不是必须的属性，不输入地址的话会自动寻找项目web项目的根目录下的”/login.jsp”页面-->
		<property name="loginUrl" value="${adminPath}/login"/>

		<!--登录成功默认跳转页面，不配置则跳转至”/”。如果登陆前点击的一个需要登录的页面，则在登录自动跳转到那个需要登录的页面。不跳转到此-->
		<property name="successUrl" value="${adminPath}?login"/>

		<!--没有权限默认跳转的页面-->
		<property name="unauthorizedUrl" value="${adminPath}/defaultIndex"/>

		<!--具体配置需要拦截哪些URL,以及访问对应的URL时使用Shiro的什么Filter进行拦截.-->
		<property name="filterChainDefinitions">
			<!--第一种实现方式-->
			<!--
			<value>
				/index.jsp=anon
				/jsp/success.jsp=anon
				/jsp/fail.jsp=anon
				/jsp/user.jsp=roles[user]
				/jsp/admin.jsp=roles[admin]
				/logout=logout
			</value>
			-->
			<!--第二种实现方式-->
			<ref bean="shiroFilterChainDefinitions"/>
		</property>
	</bean>
	<!--
	filterChainDefinitions参数说明,注意其验证顺序是自上而下
	=================================================================================================
	anon		org.apache.shiro.web.filter.authc.AnonymousFilter
	authc		org.apache.shiro.web.filter.authc.FormAuthenticationFilter
	authcBasic	org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter
	perms		org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter
	port		org.apache.shiro.web.filter.authz.PortFilter
	rest		org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter
	roles		org.apache.shiro.web.filter.authz.RolesAuthorizationFilter
	ssl			org.apache.shiro.web.filter.authz.SslFilter
	user		org.apache.shiro.web.filter.authc.UserFilter
	=================================================================================================
	anon:例子/admins/**=anon没有参数，表示可以匿名使用。
	authc:例如/admins/user/**=authc表示需要认证(登录)才能使用，没有参数
	roles：例子/admins/user/**=roles[admin],参数可以写多个，多个时必须加上引号，
			并且参数之间用逗号分割，当有多个参数时，例如admins/user/**=roles["admin,guest"],
			每个参数通过才算通过，相当于hasAllRoles()方法。
	perms：例子/admins/user/**=perms[user:add:*],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，
			例如/admins/user/**=perms["user:add:*,user:modify:*"]，当有多个参数时必须每个参数都通过才通过，
			想当于isPermitedAll()方法。
	rest：例子/admins/user/**=rest[user],根据请求的方法，相当于/admins/user/**=perms[user:method],
			其中method为post，get，delete等。
	port：例子/admins/user/**=port[8081],当请求的url的端口不是8081是跳转到schemal://serverName:8081?queryString,
			其中schmal是协议http或https等，serverName是你访问的host,8081是url配置里port的端口，queryString是你访问的url里的？后面的参数。
	authcBasic：例如/admins/user/**=authcBasic没有参数表示httpBasic认证
	ssl:例子/admins/user/**=ssl没有参数，表示安全的url请求，协议为https
	user:例如/admins/user/**=user没有参数表示必须存在用户，当登入操作时不做检查
	注：anon，authcBasic，auchc，user是认证过滤器，
	perms，roles，ssl，rest，port是授权过滤器
	=================================================================================================
	-->




	<!-- 定义授权缓存管理器, 缓存管理器使用Ehcache实现 -->
	<bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="cacheManager"/>
	</bean>



	<!--继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java-->
<!-- 
	<bean id="systemAuthorizingRealm" class="com.demo.ssm.modules.sys.security.realm.SystemAuthorizingRealm">
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<property name="hashAlgorithmName" value="MD5"/> 加密算法的名称
				<property name="storedCredentialsHexEncoded" value="true"/> 
				<property name="hashIterations" value="1024"/> 配置加密的次数
			</bean>
		</property>
	</bean>
 -->



	<!--安全管理器-->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 指向自定义 realm -->
		<property name="realms" ref="systemAuthorizingRealm"/>

		<!--cacheManager,集合spring缓存工厂-->
		<property name="cacheManager" ref="shiroCacheManager"/>
		<!--<property name="sessionManager" ref="sessionManager"/>-->
	</bean>


	<!--Shiro生命周期处理器,会自动的调用和Spring整合后各个组件的生命周期方法-->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

	<!-- AOP式方法级权限检查  -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>

</beans>

